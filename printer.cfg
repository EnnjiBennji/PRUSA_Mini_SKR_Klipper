# This file contains common configurations and pin mappings for the Prusa Buddy
# board. The LCD is not currently supported by Klipper, so the touchscreen will
# permanently display the bootloader screen after the Klipper firmware is flashed;
# use Fluidd, Mainsail, or OctoPrint etc. to control the printer.

# To use this config, the firmware should be compiled for the STM32F407. When
# running "make menuconfig", enable "extra low-level configuration setup",
# select the "128KiB + 512 byte offset" bootloader, and USB communication.
# Connect the printer to your Raspberry Pi using the printer's micro-USB port.
# If you prefer to remove Prusa's stock bootloader entirely, select the
# "No bootloader" option.

# When flashing for the first time, you will need to break the "appendix"
# on the Buddy board, then put the device into DFU mode by moving the jumper
# on the 3-pin header (older boards) or shorting the 2-pin header (newer boards)
# and resetting, and finally use "make flash" to install Klipper. Once Klipper is
# installed, you no longer need the jumper - just use "make flash" which will
# automatically put the device into DFU mode.

# Note that if you were previously running Prusa firmware, you must fully
# power cycle the board after flashing. Otherwise, Klipper will be unable to
# communicate with the TMC2209s due to the abrupt change in the baud rate,
# and will show this error: "Unable to read tmc uart register IFCNT".

# See docs/Config_Reference.md for a description of parameters.


#####################################################################
# 	MCU
#####################################################################


[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f407xx_55002B000F504E374B373820-if00
restart_method: command

[mcu pi]
serial: /tmp/klipper_host_mcu


[printer]
kinematics: cartesian
max_velocity: 180
max_accel: 1000
max_z_velocity: 12
max_z_accel: 400

[input_shaper]
shaper_freq_x: 54
shaper_freq_y: 21.9
shaper_type: mzv


#####################################################################
# 	STEPPER
#####################################################################

[stepper_x]
step_pin: PD1
dir_pin: PD0
enable_pin: !PD3
microsteps: 16
rotation_distance: 32  #200 * 16 / 100
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_endstop: 180.4
position_min: -2
position_max: 180.4
homing_speed: 50
homing_retract_dist: 0

[stepper_y]
step_pin: PD13
dir_pin: PD12
enable_pin: !PD14
microsteps: 16
rotation_distance: 32  # 200 * 16 / 100 
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_endstop: -3
position_min: -3
position_max: 180
homing_speed: 50
homing_retract_dist: 0

[stepper_z]
step_pin: PD4 
dir_pin: !PD15
enable_pin: !PD2
microsteps: 16
rotation_distance: 4
endstop_pin: probe:z_virtual_endstop
position_min: -3
position_max: 185

[extruder]
step_pin: PD9
dir_pin: PD8
enable_pin: !PD10
microsteps: 16
rotation_distance: 22.6789  # (200 * 16 * 50/17) / 415
gear_ratio: 50:17
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB1
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC0
#control: pid
min_extrude_temp: 190
#pid_Kp: 7
#pid_Ki: 0.5
#pid_Kd: 45
min_temp: 10
max_temp:280
pressure_advance: 0.0

[tmc2209 stepper_x]
uart_pin: PD5
uart_address: 1
diag_pin: ^PE2
driver_SGTHRS: 130
run_current: 0.55
sense_resistor: 0.22
stealthchop_threshold: 999999

[tmc2209 stepper_y]
uart_pin: PD5
uart_address: 3
diag_pin: ^PE1
driver_SGTHRS: 130
run_current: 0.55
sense_resistor: 0.22
stealthchop_threshold: 999999

[tmc2209 stepper_z]
uart_pin: PD5
uart_address: 0
diag_pin: ^PE3
driver_SGTHRS: 100
run_current: 0.45
sense_resistor: 0.22
stealthchop_threshold: 999999

[tmc2209 extruder]
uart_pin: PD5
uart_address: 2
diag_pin: ^PA15
driver_SGTHRS: 100
run_current: 0.4
sense_resistor: 0.22

[heater_bed]
heater_pin: PB0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA4
control: pid
pid_Kp: 120
pid_Ki: 1.5
pid_Kd: 600
min_temp: 10
max_temp: 110


#####################################################################
# 	FAN
#####################################################################

# Hotend fan.
# The stock firmware uses control ranges of PWM 0-50%, RPM 1000-8000.
# Change fan_speed below to match your preference. Measured speeds:
#   fan_speed 0.5:  50% PWM = 4000RPM (Prusa stock default speed)
#   fan_speed 1.0: 100% PWM = 8000RPM (safe but loud)
[heater_fan hotend_fan]
pin: PE9
tachometer_pin: PE14
heater: extruder
heater_temp: 50
fan_speed: 0.7

# Part cooling fan.
# The stock firmware uses control ranges of PWM 10-50%, RPM 500-5000.
# To match stock firmware, set the Klipper fan speed to 50%. This speed
# can be safely increased to 100% for better part cooling. Measured speeds:
#    50% PWM = 2500RPM (Prusa stock default speed)
#  100% PWM = 5000RPM (better cooling, still quiet)
[fan]
pin: PE11
tachometer_pin: PE10



#####################################################################
# 	SSUPER_PINDA BED_MESH
#####################################################################

# The SuperPINDA has built-in temperature compensation and no thermistor output,
# so no compensation table is needed. The PINDA thermistor is otherwise on pin PA6.
[probe]
pin: PC14
x_offset: -29
y_offset: -3
#z_offset: 0  # set this to your Live Z Offset, but negated (invert the sign)
speed: 6
samples:2
samples_result: median
sample_retract_dist: 1
samples_tolerance: 0.03
samples_tolerance_retries: 10

[safe_z_home]
home_xy_position: 115,90
z_hop: 4

[bed_mesh]
speed: 100
horizontal_move_z: 5
mesh_min: 10,10
mesh_max: 141,167
probe_count: 5,5


#####################################################################
# 	FILAMENT_SENSOR
#####################################################################

[filament_switch_sensor filament_sensor]
switch_pin: ^PC15
pause_on_runout: True
runout_gcode:
  {action_respond_info("RUNOUT Motion Sensor: Filament runout")}
  M600
insert_gcode:
  {action_respond_info("RUNOUT Motion Sensor: Filament inserted")}
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
event_delay: 3.0
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
pause_delay: 0.5
##    XYE mcu E0DET


#####################################################################
# 	GCODE_MAKROS
#####################################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    M117 Heating...
    M140 S{BED_TEMP}                         ; set bed final temp
    M104 S{EXTRUDER_TEMP}                         ; set extruder final temp
    M190 S{BED_TEMP}                         ; wait for bed final temp
    M109 S{EXTRUDER_TEMP}                         ; wait for extruder final temp
    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    M83 ; use relative distances for extrusion
    G28                            ; home all axes
    G1 Z20 F3000                   ; move nozzle away from bed
    bed_mesh_clear
    BED_MESH_CALIBRATE
    
    
#Pause/Resume Functionality
[pause_resume]
#recover_velocity: 50

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                        ; z hop amount

    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                                        ; set z hop variable for reference in resume macro
    
    SAVE_GCODE_STATE NAME=PAUSE
    BASE_PAUSE                                                                                    ; pause print
    G91                                                                                            ; relative positioning
    G1 Z{z} F900                                                                                ; raise Z up by z hop amount
    G90                                                                                            ; absolute positioning
    G1 XG0 X{printer.toolhead.axis_maximum.x/2} YG0 Y{printer.toolhead.axis_minimum.y+10} F18000   ; park toolhead at front center
    RESTORE_GCODE_STATE NAME=PAUSE
    SET_IDLE_TIMEOUT TIMEOUT=43200                                                                ; set timeout to 12 hours


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                                                                ; nozzle prime amount
    
    SAVE_GCODE_STATE NAME=RESUME
    G91                                                                                                                    ; relative positioning
    {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
        G1 Z{zhop * -1} E{e} F900                                                                                        ; prime nozzle by E, lower Z back down
    {% else %}                        
        G1 Z{zhop * -1} F900                                                                                            ; lower Z back down    without priming
    {% endif %}                                
    RESTORE_GCODE_STATE NAME=RESUME                        
    BASE_RESUME                                                                                                            ; resume print
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}    
    
[gcode_macro FORTSETZEN]
gcode:
    RESUME


[gcode_macro CHANGE_FILAMENT]
gcode:
    {% set BEEP = params.BEEP|default(2)|int %} ; Number of beeps to alert user
    {% set X = params.X|default(50)|float %} ; X position for filament change
    {% set Y = params.Y|default(5)|float %} ; Y position for filament change
    {% set Z = params.Z|default(10)|float %} ; Z relative lift for filament change position
    
    INTERACTIVE_PAUSE X={X} Y={Y} Z={Z} BEEP=0
    UNLOAD_FILAMENT
    BEEP R={BEEP}
    
[gcode_macro LOAD_FILAMENT]
gcode: |
   {% if (not(printer.idle_timeout.state == "Printing") or printer.pause_resume.is_paused) %}
      SAVE_GCODE_STATE NAME=LOAD_state
      M117 Loading filament..
      M83                            ; set extruder to relative
      G1 E50 F300                    ; load (multiple times to avoid length limit)
      G1 E50 F2000
      G1 E50 F2000
      G1 E50 F2000
      G1 E50 F2000
      G1 E50 F2000
      G1 E50 F1000
      G1 E50 F300
      G1 E10 F300
      G1 E-1 F300                    ; short retract
      M117 Filament loaded
      UPDATE_DELAYED_GCODE ID=SCHEDULE_CLEAR_SCREEN DURATION=5
      RESTORE_GCODE_STATE NAME=LOAD_state
   {% else %}
      { action_respond_info("Filament loading disabled while printing!") }
   {% endif %}
   
[gcode_macro UNLOAD_FILAMENT]
gcode:
   {% if (not(printer.idle_timeout.state == "Printing") or printer.pause_resume.is_paused) %}
      SAVE_GCODE_STATE NAME=UNLOAD_state
      
      M83                            ; set extruder to relative
      G1 E5 F450                     ; quick purge
      G1 E-6 F1800                   ; fast retract
      G1 E-16 F1200                  ; retract
      G1 E-10 F300                   ; slow retract purge
      G1 E-50 F2000                    ; load (multiple times to avoid length limit)
      G1 E-50 F2000
      G1 E-50 F2000
      G1 E-50 F2000
      G1 E-50 F2000
      G1 E-50 F2000
      G1 E-50 F2000
      G1 E-50 F2000
      M117 Filament unloaded

      UPDATE_DELAYED_GCODE ID=SCHEDULE_CLEAR_SCREEN DURATION=5
      RESTORE_GCODE_STATE NAME=UNLOAD_state
   {% else %}
      { action_respond_info("Filament unloading disabled while printing!") }
   {% endif %}


[gcode_macro PRINT_END]
gcode: |
    M104 S0 ; turn off temperature
    M140 S0 ; turn off heatbed
    M107 ; turn off fan
    g91
    G1 Z2
    g90
    G1 X0 Y180 F3000 ; home X axis
    M84 ; disable motor
    BED_MESH_CLEAR


#####################################################################
# 	SENSOREN
#####################################################################

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100


[temperature_sensor Mainboard]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100


#####################################################################
# 	LED Control
#####################################################################



[gcode_macro WLED_ON]
description: Turn WLED strip on using optional preset and resets led colors
gcode:
  {% set strip = params.STRIP|string %}
  {% set preset = params.PRESET|default(-1)|int %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=True,
                             preset=preset)}


[gcode_macro WLED_OFF]
description: Turn WLED strip off
gcode:
  {% set strip = params.STRIP|string %}

  {action_call_remote_method("set_wled_state",
                             strip=strip,
                             state=False)}



[gcode_macro SET_WLED]
description: SET_LED like functionlity for WLED, applies to all active segments
gcode:
    {% set strip = params.STRIP|string %}
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set index = params.INDEX|default(-1)|int %}
    {% set transmit = params.TRANSMIT|default(1)|int %}

    {action_call_remote_method("set_wled",
                               strip=strip,
                               red=red, green=green, blue=blue, white=white,
                               index=index, transmit=transmit)}




# Mainsail settings
[include mainsail.cfg]

#Timelapse
[include timelapse.cfg]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe]
#*# z_offset = 1.847
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 17.759
#*# pid_ki = 0.784
#*# pid_kd = 100.559
#*#
#*# [bed_mesh TXT_Prusa]
#*# version = 1
#*# points =
#*# 	  0.091875, 0.066875, 0.072500, 0.083125, 0.013125
#*# 	  0.074375, 0.060000, 0.023125, 0.071250, 0.077500
#*# 	  0.050000, 0.030625, -0.003125, 0.049375, 0.057500
#*# 	  0.008125, 0.013125, 0.005625, 0.031250, 0.042500
#*# 	  0.066250, 0.069375, 0.077500, 0.101875, 0.096250
#*# tension = 0.2
#*# min_x = 10.0
#*# algo = lagrange
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 10.0
#*# x_count = 5
#*# max_y = 167.0
#*# mesh_x_pps = 2
#*# max_x = 141.0
